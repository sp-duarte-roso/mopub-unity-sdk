#region Using Statements
using System;
using System.Collections.Generic;
using System.IO;
using System.Reflection;
using UnityEngine;
#endregion

namespace Delight
{
    /// <summary>
    /// Static class for accessing global properties. References to global properties added through partial classes generated by the framework. Globals can be accessed in the XML through the notation {@PropertyName}.
    /// </summary>
    public partial class Globals : BindableObject
    {
        #region Fields

        public HashSet<string> GlobalProperties = new HashSet<string>();

        #endregion

        #region Properties

        private ElementSize _screenWidth = new ElementSize();
        public ElementSize ScreenWidth
        {
            get { return _screenWidth; }
            set { SetProperty(ref _screenWidth, value); }
        }

        private ElementSize _screenHeight = new ElementSize();
        public ElementSize ScreenHeight
        {
            get { return _screenHeight; }
            set { SetProperty(ref _screenHeight, value); }
        }

        private DeviceType _deviceType;
        public DeviceType DeviceType
        {
            get { return _deviceType; }
            set 
            {
                if (_deviceType == value)
                    return;

                SetProperty(ref _deviceType, value);
                OnPropertyChanged(nameof(IsMobile));
                OnPropertyChanged(nameof(IsTablet));
                OnPropertyChanged(nameof(IsDesktop));
                OnPropertyChanged(nameof(IsHandheld));
            }
        }

        public bool IsMobile
        {
            get { return _deviceType == DeviceType.Mobile; }
            set { DeviceType = DeviceType.Mobile; }
        }

        public bool IsTablet
        {
            get { return _deviceType == DeviceType.Tablet; }
            set { DeviceType = DeviceType.Tablet; }
        }

        public bool IsDesktop
        {
            get { return _deviceType == DeviceType.Desktop; }
            set { DeviceType = DeviceType.Desktop; }
        }

        public bool IsHandheld
        {
            get { return _deviceType == DeviceType.Mobile || _deviceType == DeviceType.Tablet; }
        }

        private ScreenOrientation _screenOrientation;
        public ScreenOrientation ScreenOrientation
        {
            get { return _screenOrientation; }
            set 
            {
                if (_screenOrientation == value)
                    return;

                SetProperty(ref _screenOrientation, value);
                OnPropertyChanged(nameof(IsPortrait));
                OnPropertyChanged(nameof(IsLandscape));
            }
        }

        public bool IsPortrait
        {
            get { return _screenOrientation == ScreenOrientation.Portrait || _screenOrientation == ScreenOrientation.PortraitUpsideDown; }
        }

        public bool IsLandscape
        {
            get { return _screenOrientation == ScreenOrientation.Landscape || _screenOrientation == ScreenOrientation.LandscapeRight; }
        }

        #endregion

        #region Constructor

        public Globals()
        {
            GlobalProperties.Add(nameof(ScreenWidth));
            GlobalProperties.Add(nameof(ScreenHeight));
            GlobalProperties.Add(nameof(DeviceType));
            GlobalProperties.Add(nameof(IsMobile));
            GlobalProperties.Add(nameof(IsTablet));
            GlobalProperties.Add(nameof(IsDesktop));
            GlobalProperties.Add(nameof(IsHandheld));
            GlobalProperties.Add(nameof(ScreenOrientation));
            GlobalProperties.Add(nameof(IsPortrait));
            GlobalProperties.Add(nameof(IsLandscape));
        }

        #endregion
    }

    /// <summary>
    /// Device type.
    /// </summary>
    public enum DeviceType
    {
        Mobile = 0,
        Tablet = 1,
        Desktop = 2
    }
}
